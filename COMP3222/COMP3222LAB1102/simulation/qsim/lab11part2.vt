// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/08/2017 02:19:23"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lab11part2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab11part2_vlg_sample_tst(
	clk,
	data,
	resetn,
	run,
	sampler_tx
);
input  clk;
input [7:0] data;
input  resetn;
input  run;
output sampler_tx;

reg sample;
time current_time;
always @(clk or data or resetn or run)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lab11part2_vlg_check_tst (
	found,
	mem_addr,
	sampler_rx
);
input  found;
input [4:0] mem_addr;
input sampler_rx;

reg  found_expected;
reg [4:0] mem_addr_expected;

reg  found_prev;
reg [4:0] mem_addr_prev;

reg  found_expected_prev;
reg [4:0] mem_addr_expected_prev;

reg  last_found_exp;
reg [4:0] last_mem_addr_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	found_prev = found;
	mem_addr_prev = mem_addr;
end

// update expected /o prevs

always @(trigger)
begin
	found_expected_prev = found_expected;
	mem_addr_expected_prev = mem_addr_expected;
end


// expected mem_addr[ 4 ]
initial
begin
	mem_addr_expected[4] = 1'bX;
end 
// expected mem_addr[ 3 ]
initial
begin
	mem_addr_expected[3] = 1'bX;
end 
// expected mem_addr[ 2 ]
initial
begin
	mem_addr_expected[2] = 1'bX;
end 
// expected mem_addr[ 1 ]
initial
begin
	mem_addr_expected[1] = 1'bX;
end 
// expected mem_addr[ 0 ]
initial
begin
	mem_addr_expected[0] = 1'bX;
end 

// expected found
initial
begin
	found_expected = 1'bX;
end 
// generate trigger
always @(found_expected or found or mem_addr_expected or mem_addr)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected found = %b | expected mem_addr = %b | ",found_expected_prev,mem_addr_expected_prev);
	$display("| real found = %b | real mem_addr = %b | ",found_prev,mem_addr_prev);
`endif
	if (
		( found_expected_prev !== 1'bx ) && ( found_prev !== found_expected_prev )
		&& ((found_expected_prev !== last_found_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port found :: @time = %t",  $realtime);
		$display ("     Expected value = %b", found_expected_prev);
		$display ("     Real value = %b", found_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_found_exp = found_expected_prev;
	end
	if (
		( mem_addr_expected_prev[0] !== 1'bx ) && ( mem_addr_prev[0] !== mem_addr_expected_prev[0] )
		&& ((mem_addr_expected_prev[0] !== last_mem_addr_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_addr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_addr_expected_prev);
		$display ("     Real value = %b", mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_mem_addr_exp[0] = mem_addr_expected_prev[0];
	end
	if (
		( mem_addr_expected_prev[1] !== 1'bx ) && ( mem_addr_prev[1] !== mem_addr_expected_prev[1] )
		&& ((mem_addr_expected_prev[1] !== last_mem_addr_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_addr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_addr_expected_prev);
		$display ("     Real value = %b", mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_mem_addr_exp[1] = mem_addr_expected_prev[1];
	end
	if (
		( mem_addr_expected_prev[2] !== 1'bx ) && ( mem_addr_prev[2] !== mem_addr_expected_prev[2] )
		&& ((mem_addr_expected_prev[2] !== last_mem_addr_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_addr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_addr_expected_prev);
		$display ("     Real value = %b", mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_mem_addr_exp[2] = mem_addr_expected_prev[2];
	end
	if (
		( mem_addr_expected_prev[3] !== 1'bx ) && ( mem_addr_prev[3] !== mem_addr_expected_prev[3] )
		&& ((mem_addr_expected_prev[3] !== last_mem_addr_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_addr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_addr_expected_prev);
		$display ("     Real value = %b", mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_mem_addr_exp[3] = mem_addr_expected_prev[3];
	end
	if (
		( mem_addr_expected_prev[4] !== 1'bx ) && ( mem_addr_prev[4] !== mem_addr_expected_prev[4] )
		&& ((mem_addr_expected_prev[4] !== last_mem_addr_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_addr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_addr_expected_prev);
		$display ("     Real value = %b", mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_mem_addr_exp[4] = mem_addr_expected_prev[4];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lab11part2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] data;
reg resetn;
reg run;
// wires                                               
wire found;
wire [4:0] mem_addr;

wire sampler;                             

// assign statements (if any)                          
lab11part2 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.data(data),
	.found(found),
	.mem_addr(mem_addr),
	.resetn(resetn),
	.run(run)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// run
initial
begin
	run = 1'b1;
end 

// resetn
initial
begin
	resetn = 1'b1;
	resetn = #40000 1'b0;
end 
// data[ 7 ]
initial
begin
	data[7] = 1'b0;
end 
// data[ 6 ]
initial
begin
	data[6] = 1'b0;
end 
// data[ 5 ]
initial
begin
	data[5] = 1'b0;
end 
// data[ 4 ]
initial
begin
	data[4] = 1'b1;
end 
// data[ 3 ]
initial
begin
	data[3] = 1'b1;
end 
// data[ 2 ]
initial
begin
	data[2] = 1'b1;
end 
// data[ 1 ]
initial
begin
	data[1] = 1'b1;
end 
// data[ 0 ]
initial
begin
	data[0] = 1'b1;
end 

lab11part2_vlg_sample_tst tb_sample (
	.clk(clk),
	.data(data),
	.resetn(resetn),
	.run(run),
	.sampler_tx(sampler)
);

lab11part2_vlg_check_tst tb_out(
	.found(found),
	.mem_addr(mem_addr),
	.sampler_rx(sampler)
);
endmodule

